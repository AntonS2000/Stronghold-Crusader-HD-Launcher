###=============================================================###
# –ü—Ä–æ–≥—Ä–∞–º–º–∞: Stronghold Crusader HD Launcher (SCHDL)
# –í–µ—Ä—Å–∏—è: 1.0.0 (Stable)
# ¬© AntonS2000 (MA Foundation) 2025
# –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: 11.08.2025
# –õ–∏—Ü–µ–Ω–∑–∏—è: MA Foundation Original License
# –Ø–∑—ã–∫: Python 3.13
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏: PyQt6, psutil, json, subprocess, pathlib
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: Stronghold Crusader HD v1.3, DXWnd, AutoHotkey v2.0.0
# –û–ø–∏—Å–∞–Ω–∏–µ: –õ–∞—É–Ω—á–µ—Ä –¥–ª—è –∏–≥—Ä—ã Stronghold Crusader HD (Portable)
#           —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å–∫–∞ DXWnd –∏ –ø–∞—Ç—á–∞ AutoHotkey.
#           –ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–∞–∫-–ª–∏–±–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏–≥—Ä—ã –∏ –µ—ë
#           –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏ ‚Äì –∑–∞–ø—É—Å–∫–∞—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏—Ö.
#           –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
#           PyQt6, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–º–µ–Ω—É —Ç–µ–º –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö
#           –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
###=============================================================###

import sys
import json
import subprocess
import psutil
from pathlib import Path
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QComboBox, QLabel, QSpacerItem,
    QSizePolicy, QMessageBox
)
from PyQt6.QtCore import Qt, QProcess, QCoreApplication
from PyQt6.QtGui import QPalette, QColor, QIcon

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
APP_NAME = "Stronghold Crusader HD Launcher"
SETTINGS_FILE = "settings.json"
DEFAULT_SETTINGS = {
    "theme": "light",
    "messages": "disabled",
    "last_run": "‚úÖ –í—Å—ë –≤–º–µ—Å—Ç–µ",
    "last_close": "üöÄ –õ–∞—É–Ω—á–µ—Ä + üíä–ü–∞—Ç—á"
}
ICON_FILE = "gameicon.ico"  # –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è Stronghold Crusader HD Launcher.py)
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# –ü—É—Ç–∏ –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–∞–º (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –∏–≥—Ä—ã)
DXWND_EXE = BASE_DIR / "DXWnd" / "dxwnd.exe"         # –õ–∞—É–Ω—á–µ—Ä DXWnd
PATCH_EXE = BASE_DIR / "HKPatch" / "HKPatch.exe"     # –ü–∞—Ç—á AutoHotkey v2.0.0

def load_theme():
    return load_settings().get("theme", "light")

def save_theme(theme):
    save_setting("theme", theme)

def load_settings():
    settings_path = Path(SETTINGS_FILE)
    if settings_path.exists():
        try:
            with open(settings_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚õî –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è settings.json: {e}")
    else:
        # –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        with open(settings_path, 'w', encoding='utf-8') as f:
            json.dump(DEFAULT_SETTINGS, f, ensure_ascii=False, indent=2)
    return DEFAULT_SETTINGS.copy()

def save_setting(key, value):
    settings = load_settings()
    settings[key] = value
    with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(settings, f, ensure_ascii=False, indent=2)

SETTINGS = load_settings()

def apply_theme(app, theme):
    if theme == "dark":
        app.setStyle("Fusion")
        palette = QPalette()
        palette.setColor(QPalette.ColorRole.Window, QColor(53, 53, 53))
        palette.setColor(QPalette.ColorRole.WindowText, Qt.GlobalColor.white)
        palette.setColor(QPalette.ColorRole.Base, QColor(25, 25, 25))
        palette.setColor(QPalette.ColorRole.AlternateBase, QColor(53, 53, 53))
        palette.setColor(QPalette.ColorRole.ToolTipBase, Qt.GlobalColor.black)
        palette.setColor(QPalette.ColorRole.ToolTipText, Qt.GlobalColor.white)
        palette.setColor(QPalette.ColorRole.Text, Qt.GlobalColor.white)
        palette.setColor(QPalette.ColorRole.Button, QColor(53, 53, 53))
        palette.setColor(QPalette.ColorRole.ButtonText, Qt.GlobalColor.white)
        palette.setColor(QPalette.ColorRole.BrightText, Qt.GlobalColor.red)
        palette.setColor(QPalette.ColorRole.Link, QColor(42, 130, 218))
        palette.setColor(QPalette.ColorRole.Highlight, QColor(42, 130, 218))
        palette.setColor(QPalette.ColorRole.HighlightedText, Qt.GlobalColor.black)
        app.setPalette(palette)
    else:
        app.setStyle("Fusion")
        palette = QPalette()
        palette.setColor(QPalette.ColorRole.Window, QColor(240, 240, 240))
        palette.setColor(QPalette.ColorRole.WindowText, Qt.GlobalColor.black)
        palette.setColor(QPalette.ColorRole.Base, Qt.GlobalColor.white)
        palette.setColor(QPalette.ColorRole.AlternateBase, QColor(240, 240, 240))
        palette.setColor(QPalette.ColorRole.ToolTipBase, Qt.GlobalColor.white)
        palette.setColor(QPalette.ColorRole.ToolTipText, Qt.GlobalColor.black)
        palette.setColor(QPalette.ColorRole.Text, Qt.GlobalColor.black)
        palette.setColor(QPalette.ColorRole.Button, QColor(240, 240, 240))
        palette.setColor(QPalette.ColorRole.ButtonText, Qt.GlobalColor.black)
        palette.setColor(QPalette.ColorRole.BrightText, Qt.GlobalColor.red)
        palette.setColor(QPalette.ColorRole.Link, QColor(0, 100, 200))
        palette.setColor(QPalette.ColorRole.Highlight, QColor(0, 100, 200))
        palette.setColor(QPalette.ColorRole.HighlightedText, Qt.GlobalColor.white)
        app.setPalette(palette)


def restart_app():
    QCoreApplication.quit()
    subprocess.Popen([sys.executable] + sys.argv)
    sys.exit()

def show_message(title, text, icon=QMessageBox.Icon.Information):
    if load_settings().get("messages", "enabled") == "enabled":
        msg = QMessageBox()
        msg.setWindowTitle(title)
        msg.setText(text)
        msg.setIcon(icon)
        msg.setWindowIcon(QIcon(str(Path(__file__).parent / ICON_FILE))) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É SCHDL
        # msg.setWindowIcon(QIcon(str(Path(ICON_FILE)))) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É SCHDL
        msg.exec()
        
class MainLauncher(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle(APP_NAME)
        self.setFixedSize(450, 300)  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.setWindowIcon(self.load_icon())
        self.init_ui()

    def load_icon(self):
        icon_path = Path(ICON_FILE)  # –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ
        if not icon_path.is_absolute():
            icon_path = Path(__file__).parent / icon_path  # –∏—â–µ–º –≤ –ø–∞–ø–∫–µ SCHDL
        if icon_path.exists():
            return QIcon(str(icon_path))
        return QIcon()  # –ø—É—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞
        
    def toggle_messages(self):
        current = load_settings().get("messages", "enabled")
        new_value = "disabled" if current == "enabled" else "enabled"
        save_setting("messages", new_value)
        self.msg_btn.setText("‚ùå –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è" if new_value == "enabled" else "‚úÖ –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def init_ui(self):
        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignmentFlag.AlignTop)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π (–ø–æ —Ü–µ–Ω—Ç—Ä—É)
        header_container = QHBoxLayout()
        header_container.addStretch()  # —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º —Å–ª–µ–≤–∞

        header_layout = QHBoxLayout()
        header_layout.setSpacing(10)  # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∏–∫–æ–Ω–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º
        header_layout.setContentsMargins(0, 0, 0, 0)

        # –ò–∫–æ–Ω–∫–∞
        icon_label = QLabel()
        icon_path = Path(__file__).parent / ICON_FILE
        if icon_path.exists():
            from PyQt6.QtGui import QPixmap
            pixmap = QPixmap(str(icon_path))
            if not pixmap.isNull():
                pixmap = pixmap.scaled(32, 32, Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation)
                icon_label.setPixmap(pixmap)
            else:
                icon_label.setText("üéÆ")
                icon_label.setStyleSheet("font-size: 32px;")
        else:
            icon_label.setText("üéÆ")
            icon_label.setStyleSheet("font-size: 32px;")

        # –¢–µ–∫—Å—Ç
        title = QLabel("Stronghold Crusader HD Launcher")
        title.setStyleSheet("font-size: 18px; font-weight: bold;")
        title.setAlignment(Qt.AlignmentFlag.AlignVCenter)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π layout
        header_layout.addWidget(icon_label, alignment=Qt.AlignmentFlag.AlignVCenter)
        header_layout.addWidget(title, alignment=Qt.AlignmentFlag.AlignVCenter)

        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π layout –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        header_container.addLayout(header_layout)
        header_container.addStretch()  # —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º —Å–ø—Ä–∞–≤–∞

        layout.addSpacing(10)  # –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        layout.addLayout(header_container)

        # –°—Ç—Ä–æ–∫–∞: –∫–Ω–æ–ø–∫–∞ —Ç–µ–º—ã + –∫–Ω–æ–ø–∫–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
        theme_row = QHBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã
        current_theme = load_theme()
        self.theme_btn = QPushButton("‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞" if current_theme == "dark" else "üåë –¢—ë–º–Ω–∞—è —Ç–µ–º–∞")
        self.theme_btn.setToolTip("–ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        self.theme_btn.clicked.connect(self.toggle_theme)

        # –ö–Ω–æ–ø–∫–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
        msg_state = load_settings().get("messages", "enabled")
        self.msg_btn = QPushButton("‚ùå –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è" if msg_state == "enabled" else "‚úÖ –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        self.msg_btn.setToolTip("–í–∫–ª—é—á–∞–µ—Ç/–æ—Ç–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        self.msg_btn.clicked.connect(self.toggle_messages)

        theme_row.addWidget(self.theme_btn)
        theme_row.addWidget(self.msg_btn)

        layout.addLayout(theme_row)
        layout.addSpacing(15)
        
        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫: —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å
        self.combo_run = QComboBox()
        self.combo_run.addItems([
            "üöÄ –õ–∞—É–Ω—á–µ—Ä DXWnd",
            "üíä –ü–∞—Ç—á WASD",
            "‚úÖ –í—Å—ë –≤–º–µ—Å—Ç–µ"
        ])

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä
        last_run = load_settings().get("last_run", "üöÄ –õ–∞—É–Ω—á–µ—Ä DXWnd")
        index = self.combo_run.findText(last_run)
        if index >= 0:
            self.combo_run.setCurrentIndex(index)

        layout.addWidget(QLabel("üôÇ –ß—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—É–¥–µ–º?"))
        layout.addWidget(self.combo_run)

        # –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
        self.btn_run = QPushButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å")
        self.btn_run.setToolTip("–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        self.btn_run.clicked.connect(self.run_selected)
        layout.addWidget(self.btn_run)
        layout.addSpacing(15)

        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
        self.combo_close = QComboBox()
        self.combo_close.addItems([
            "üöÄ –õ–∞—É–Ω—á–µ—Ä DXWnd",
            "üíä –ü–∞—Ç—á WASD",
            "üöÄ –õ–∞—É–Ω—á–µ—Ä + üíä–ü–∞—Ç—á",
            "‚û°Ô∏è –¢–æ–ª—å–∫–æ SCHDL",
            "‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"
        ])

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä
        last_close = load_settings().get("last_close", "üöÄ –õ–∞—É–Ω–∫–µ—Ä DXWnd")
        index = self.combo_close.findText(last_close)
        if index >= 0:
            self.combo_close.setCurrentIndex(index)

        layout.addSpacing(5)
        layout.addWidget(QLabel("üíÅ‚Äç‚ôÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:"))
        layout.addWidget(self.combo_close)

        # –ß–µ—Ç–≤—ë—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: –∫–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
        self.btn_close = QPushButton("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
        self.btn_close.setToolTip("–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å—ã")
        self.btn_close.clicked.connect(self.close_selected)
        layout.addWidget(self.btn_close)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
        self.combo_close.currentTextChanged.connect(self.update_close_button_text)
        self.update_close_button_text()  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
        self.combo_run.currentTextChanged.connect(self.save_last_run)
        self.combo_close.currentTextChanged.connect(self.save_last_close)

        # –û—Ç—Å—Ç—É–ø –≤–Ω–∏–∑
        layout.addSpacerItem(QSpacerItem(20, 40, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding))

        self.setLayout(layout)

    def update_close_button_text(self):
        text = self.combo_close.currentText()
        if text in ["üöÄ –õ–∞—É–Ω—á–µ—Ä DXWnd", "üíä –ü–∞—Ç—á WASD", "‚û°Ô∏è –¢–æ–ª—å–∫–æ SCHDL"]:
            self.btn_close.setText("‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å")
        else:
            self.btn_close.setText("‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")

    def save_last_run(self, text):
        save_setting("last_run", text)

    def save_last_close(self, text):
        save_setting("last_close", text)

    def toggle_theme(self):
        current_theme = load_theme()
        new_theme = "light" if current_theme == "dark" else "dark"
        save_theme(new_theme)
        restart_app()

    @staticmethod
    def is_process_running(process_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
        for proc in psutil.process_iter(['name']):
            try:
                if proc.info['name'].lower() == process_name.lower():
                    return True
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        return False

    def is_running(self, key):
        exe_map = {
            "dxwnd": "dxwnd.exe",
            "patch": "HKPatch.exe"
        }
        if key in exe_map:
            return self.is_process_running(exe_map[key])
        return False

    def start_dxwnd(self):
        if self.is_process_running("dxwnd.exe"):
            show_message("–£–∂–µ –∑–∞–ø—É—â–µ–Ω", "üëå –õ–∞—É–Ω—á–µ—Ä DXWnd —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", QMessageBox.Icon.Information)
            return
        if not DXWND_EXE.exists():
            show_message("–û—à–∏–±–∫–∞", f"üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{DXWND_EXE}", QMessageBox.Icon.Critical)
            return
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äî –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ SCHDL
        if QProcess.startDetached(str(DXWND_EXE)):
            show_message("–ó–∞–ø—É—â–µ–Ω", f"üöÄ –õ–∞—É–Ω—á–µ—Ä DXWnd –∑–∞–ø—É—â–µ–Ω:\n{DXWND_EXE}", QMessageBox.Icon.Information)
        else:
            show_message("–û—à–∏–±–∫–∞", f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å DXWnd:\n{DXWND_EXE}", QMessageBox.Icon.Critical)
        
    def start_patch(self):
        if self.is_process_running("HKPatch.exe"):
            show_message("–£–∂–µ –∑–∞–ø—É—â–µ–Ω", "üëå –ü–∞—Ç—á AutoHotkey v2.0.0 —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", QMessageBox.Icon.Information)
            return
        if not PATCH_EXE.exists():
            show_message("–û—à–∏–±–∫–∞", f"üö´ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{PATCH_EXE}", QMessageBox.Icon.Critical)
            return
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äî –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ SCHDL
        if QProcess.startDetached(str(PATCH_EXE)):
            show_message("–ó–∞–ø—É—â–µ–Ω", f"üöÄ –ü–∞—Ç—á –∑–∞–ø—É—â–µ–Ω:\n{PATCH_EXE}", QMessageBox.Icon.Information)
        else:
            show_message("–û—à–∏–±–∫–∞", f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ç—á:\n{PATCH_EXE}", QMessageBox.Icon.Critical)

    def run_all(self):
        launched = []
        if not self.is_running("dxwnd") and DXWND_EXE.exists():
            self.start_dxwnd()
            launched.append("–õ–∞—É–Ω—á–µ—Ä DXWnd")
        elif self.is_running("dxwnd"):
            launched.append("–õ–∞—É–Ω—á–µ—Ä DXWnd (—É–∂–µ –∑–∞–ø—É—â–µ–Ω)")
        elif not DXWND_EXE.exists():
            show_message("–û—à–∏–±–∫–∞", f"üò® –õ–∞—É–Ω—á–µ—Ä DXWnd –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{DXWND_EXE}", QMessageBox.Icon.Warning)

        if not self.is_running("patch") and PATCH_EXE.exists():
            self.start_patch()
            launched.append("–ü–∞—Ç—á AutoHotkey v2.0.0")
        elif self.is_running("patch"):
            launched.append("–ü–∞—Ç—á AutoHotkey v2.0.0 (—É–∂–µ –∑–∞–ø—É—â–µ–Ω)")
        elif not PATCH_EXE.exists():
            show_message("–û—à–∏–±–∫–∞", f"üò® –ü–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{PATCH_EXE}", QMessageBox.Icon.Warning)

        if launched:
            show_message("–ó–∞–ø—É—â–µ–Ω–æ", "üëâ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞:\n" + "\n".join(f"‚Ä¢ {item}" for item in launched), QMessageBox.Icon.Information)
        else:
            show_message("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "ü§∑‚Äç‚ôÇÔ∏è –ù–µ—á–µ–≥–æ –∑–∞–ø—É—Å–∫–∞—Ç—å.", QMessageBox.Icon.Information)

    def on_process_error(self, name, error):
        print(f"üö´ –û—à–∏–±–∫–∞ {name}: {error}")
        # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

    def run_selected(self):
        selection = self.combo_run.currentText()

        if selection == "üöÄ –õ–∞—É–Ω—á–µ—Ä DXWnd":
            self.start_dxwnd()
        elif selection == "üíä –ü–∞—Ç—á WASD":
            self.start_patch()
        elif selection == "‚úÖ –í—Å—ë –≤–º–µ—Å—Ç–µ":
            self.run_all()

    def close_selected(self):
        selection = self.combo_close.currentText()
        closed = []

        def terminate_by_name(process_name, friendly_name):
            found = False
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    if proc.info['name'].lower() == process_name.lower():
                        proc.terminate()
                        try:
                            proc.wait(timeout=3)  # –∂–¥—ë–º 3 —Å–µ–∫—É–Ω–¥—ã
                            closed.append(friendly_name)
                        except psutil.TimeoutExpired:
                            proc.kill()
                            closed.append(f"{friendly_name} (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)")
                        found = True
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    pass
            if not found:
                pass  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±—É–¥—É—â–µ–º –≤ –ª–æ–≥, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

        if selection == "üöÄ –õ–∞—É–Ω—á–µ—Ä DXWnd":
            terminate_by_name("dxwnd.exe", "–õ–∞—É–Ω—á–µ—Ä DXWnd")
        elif selection == "üíä –ü–∞—Ç—á WASD":
            terminate_by_name("HKPatch.exe", "–ü–∞—Ç—á AutoHotkey v2.0.0")
        elif selection == "üöÄ –õ–∞—É–Ω—á–µ—Ä + üíä–ü–∞—Ç—á":
            terminate_by_name("dxwnd.exe", "–õ–∞—É–Ω—á–µ—Ä DXWnd")
            terminate_by_name("HKPatch.exe", "–ü–∞—Ç—á AutoHotkey v2.0.0")
        elif selection == "‚û°Ô∏è –¢–æ–ª—å–∫–æ SCHDL":
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç—å SCHDL?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            ) if load_settings().get("messages", "enabled") == "enabled" else QMessageBox.StandardButton.Yes
            if reply == QMessageBox.StandardButton.Yes:
                self.close()
        elif selection == "‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã":
            terminate_by_name("dxwnd.exe", "–õ–∞—É–Ω—á–µ—Ä DXWnd")
            terminate_by_name("HKPatch.exe", "–ü–∞—Ç—á AutoHotkey v2.0.0")
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç—å –∏ SCHDL?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            ) if load_settings().get("messages", "enabled") == "enabled" else QMessageBox.StandardButton.Yes
            if reply == QMessageBox.StandardButton.Yes:
                self.close()

        if closed:
            show_message("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", "‚úÖ –ë—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã:\n" + "\n".join(f"‚Ä¢ {item}" for item in closed), QMessageBox.Icon.Information)
        elif selection not in ["‚û°Ô∏è –¢–æ–ª—å–∫–æ SCHDL", "‚úÖ –í—Å—ë –≤–º–µ—Å—Ç–µ"]:
            show_message("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "ü§∑‚Äç‚ôÇÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.", QMessageBox.Icon.Information)

def closeEvent(self, event):
    event.accept()          # SCHDL –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è ‚Äî –Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã

def main():
    app = QApplication(sys.argv)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    theme = load_theme()
    apply_theme(app, theme)

    window = MainLauncher()
    window.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    main()